generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User and Profile models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts           Account[]
  sessions           Session[]
  profile            Profile?
  subscription       Subscription?
  conversations      ConversationMember[]
  messages           Message[]             @relation("UserMessages")
  chatRequestsSent   ChatRequest[]         @relation("ChatReqFrom")
  chatRequestsRecv   ChatRequest[]         @relation("ChatReqTo")
  blocksSent         Block[]               @relation("BlocksByUser")
  blocksReceived     Block[]               @relation("BlocksOfUser")
  voiceSessionsAsA   VoiceSession[]        @relation("VoiceSessionUserA")
  voiceSessionsAsB   VoiceSession[]        @relation("VoiceSessionUserB")
}

model Profile {
  userId       String   @id
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatarUrl    String
  name         String
  gender       Gender
  genderLocked Boolean  @default(true)
  dob          DateTime
  bio          String   @db.VarChar(160)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Gender {
  male
  female
}

// Subscription model
model Subscription {
  id               String    @id @default(cuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId String?   @unique
  stripeSubId      String?   @unique
  status           SubStatus @default(INACTIVE)
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum SubStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
}

// Chat models
model Conversation {
  id        String               @id @default(cuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  members   ConversationMember[]
  messages  Message[]
}

model ConversationMember {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastReadAt     DateTime?
  joinedAt       DateTime     @default(now())

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  content        String       @db.VarChar(2000)
  createdAt      DateTime     @default(now())
  editedAt       DateTime?
}

model ChatRequest {
  id        String        @id @default(cuid())
  fromId    String
  from      User          @relation("ChatReqFrom", fields: [fromId], references: [id], onDelete: Cascade)
  toId      String
  to        User          @relation("ChatReqTo", fields: [toId], references: [id], onDelete: Cascade)
  note      String?       @db.VarChar(200)
  status    ChatReqStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([fromId, toId])
}

enum ChatReqStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

// Voice models
model VoiceSession {
  id        String      @id @default(cuid())
  roomCode  String      @unique
  userAId   String
  userA     User        @relation("VoiceSessionUserA", fields: [userAId], references: [id], onDelete: Cascade)
  userBId   String
  userB     User        @relation("VoiceSessionUserB", fields: [userBId], references: [id], onDelete: Cascade)
  startedAt DateTime?
  endedAt   DateTime?
  status    VoiceStatus @default(CREATED)
  createdAt DateTime    @default(now())
}

enum VoiceStatus {
  CREATED
  CONNECTED
  ENDED
}

// Block model
model Block {
  id        String   @id @default(cuid())
  byUserId  String
  byUser    User     @relation("BlocksByUser", fields: [byUserId], references: [id], onDelete: Cascade)
  targetId  String
  target    User     @relation("BlocksOfUser", fields: [targetId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([byUserId, targetId])
}
